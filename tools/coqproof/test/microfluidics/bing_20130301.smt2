(set-logic QF_NRA_ODE)
(declare-fun E_1_t () Real)
(declare-fun E_1_0 () Real)
(declare-fun S_1_t () Real)
(declare-fun S_1_0 () Real)
(declare-fun ES_1_t () Real)
(declare-fun ES_1_0 () Real)
(declare-fun P_1_t () Real)
(declare-fun P_1_0 () Real)
(declare-fun time_1 () Real)
(define-ode 1 (= d/dt[E_1] (0.0 - ((0.1 * E_1 * S_1) - 0.1 * ES_1) + (0.3 * ES_1))))
(define-ode 1 (= d/dt[ES_1] (((0.1 * E_1 * S_1) - 0.1 * ES_1) - (0.3 * ES_1))))
(define-ode 1 (= d/dt[S_1] (0.0 - ((0.1 * E_1 * S_1) - (0.1 * ES_1)))))
(define-ode 1 (= d/dt[P_1] ((0.3 * ES_1))))
(assert (<= 0.0 E_1_0))
(assert (<= E_1_0 15))
(assert (<= 0.0 E_1_t))
(assert (<= E_1_t 15))
(assert (<= 0.0 S_1_0))
(assert (<= S_1_0 15))
(assert (<= 0.0 S_1_t))
(assert (<= S_1_t 15))
(assert (<= 0.0 ES_1_0))
(assert (<= ES_1_0 15))
(assert (<= 0.0 ES_1_t))
(assert (<= ES_1_t 15))
(assert (<= 0.0 P_1_0))
(assert (<= P_1_0 15))
(assert (<= 0.0 P_1_t))
(assert (<= P_1_t 15))
(assert (<= 0.0 time_1))
(assert (<= time_1 10.0))
(assert (and (= E_1_0 9.0) (= ES_1_0 1.0) (= S_1_0 13.5) (= P_1_0 1.5) (<= E_1_t 15) (>= E_1_t 0) (<= 0.0 ES_1_t) (<= ES_1_t 15.0) (<= 0.0 S_1_t) (<= S_1_t 15.0) (<= 0.0 P_1_t) (<= P_1_t 15.0) (= time_1 2.0) ))
(check-sat)
(exit)
